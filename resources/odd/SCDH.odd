<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>SCDH</title>
            </titleStmt>
            <publicationStmt>
                <publisher>Service Center of Digital Humanities, Westfälische Wilhelmsuniversität
                    Münster</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under
                        GNU General Public License</licence>
                    <p>Copyright 2021 <ref target="https://www.uni-muenster.de/SCDH/">SCDH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify it under
                        the terms of the GNU General Public License as published by the Free
                        Software Foundation, either version 3 of the License, or (at your option)
                        any later version.</p>
                    <p>This program is distributed in the hope that it will be useful, but WITHOUT
                        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
                        FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
                        more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Initially generated by <ref target="http://tei-publisher.com">TEI
                    Publisher</ref>, then handcrafted by the SCDH team.</p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <revisionDesc>
            <change when="2021-04-07Z">Initial version</change>
            <change when="2021-04-10Z" who="clueck">PM for witness catalogue, inline apparatus,
                caesura</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" source="teipublisher.odd" ident="SCDH">

                <!-- witness catalogue -->
                <specGrp xml:id="witness-catalogue">
                    <p xml:lang="de">Im Handschriftenkatalog steht <gi>listWit</gi> nicht im
                            <gi>teiHeader</gi>, sondern in <gi>text</gi>. Zur Darstellung des
                        Katalogs gehört, dass geschachtelte <gi>listWit</gi>-Elemente als Gliederung
                        aufgefasst und dass die <gi>witness</gi>-Elemente als Block-Elemente
                        ausgegeben werden. Es müssen sowohl die Siglen als auch die vollständigen
                        Handschriftnachweise dargestellt werden.</p>
                    <elementSpec mode="change" ident="listWit">
                        <model behaviour="section" predicate="ancestor::text"/>
                    </elementSpec>
                    <elementSpec mode="change" ident="head">
                        <model behaviour="heading" predicate="parent::listWit">
                            <outputRendition> font-weight: bold; text-decoration: underline;
                            </outputRendition>
                        </model>
                    </elementSpec>
                    <elementSpec mode="replace" ident="witness">
                        <model behaviour="block" predicate="ancestor::listWit/ancestor::text"/>
                    </elementSpec>
                    <elementSpec ident="choice" mode="change">
                        <model behaviour="alternate" predicate="parent::witness and abbr and expan">
                            <desc xml:lang="de">Im Handschriftenkatalog sollen sowohl die in
                                    <gi>abbr</gi> enthaltenen Siglen als auch die in <gi>expan</gi>
                                enthaltenen Handschriftenbezeichnungen angezeigt werden. An erster
                                Stelle soll jedoch der in den TEI-Dateien der Edition verwendete
                                Identifier (<att>xml:id</att> des <gi>witness</gi>-Elements)
                                angegeben werden. Siglen, die gleich lauten, sollen nicht wiederholt
                                werden.</desc>
                            <param name="default" value="concat(parent::witness/@xml:id, ': ', string-join(abbr[. ne ancestor::witness/@xml:id]|expan, ' = '))"/>
                            <param name="alternate" value="parent::witness/@xml:id"/>
                        </model>
                    </elementSpec>
                </specGrp>

                <specGrp xml:id="apparatus">
                    <p xml:lang="de">Darstellung des kritischen Apparats. Siehe <ptr target="https://gitlab.existsolutions.com/tei-publisher/tei-publisher-app/issues/103"/>.</p>
                    <elementSpec ident="app" mode="add">
                        <modelSequence predicate="root($parameters?root)//teiHeader//variantEncoding[@method eq 'parallel-segmentation']">
                            <desc>Ein Parallel-Segmentation-Inline-Apparat.</desc>
                            <model behaviour="inline" cssClass="lem" predicate="not($parameters?tac-mode) or $parameters?tac-mode eq 'text'">
                                <desc>Ausgabe des Lemmas im Text.</desc>
                                <param name="content" value="lem/node()"/>
                            </model>
                            <model behaviour="note" predicate="not($parameters?tac-mode)">
                                <desc xml:lang="de">Im normalen (default) Modus wird der Apparat in
                                    Fußnoten dargestellt.</desc>
                                <param name="content" value="(lem, rdg)"/>
                            </model>
                            <model behaviour="inline" predicate="$parameters?tac-mode eq 'apparatus'">
                                <desc xml:lang="de">Falls tac-Modus (text-apparatus-comment)
                                    'apparatus', also im TAC-Apparat, ist wird der Apparat inline
                                    dargestellt.</desc>
                                <param name="content" value="(lem, rdg)"/>
                            </model>
                        </modelSequence>
                    </elementSpec>
                    <elementSpec ident="rdg" mode="add">
                        <modelSequence>
                            <model behaviour="inline" predicate="preceding-sibling::rdg">
                                <desc>Trennzeichen zwischen den Lesarten.</desc>
                                <param name="content" value="'; '"/>
                            </model>
                            <model behaviour="inline" cssClass="rdg">
                                <desc>Die Lesart ausgeben.</desc>
                            </model>
                            <model behaviour="inline" cssClass="wit">
                                <desc>Sigle ausgeben</desc>
                                <param name="content" value="string-join(tokenize(@wit) ! substring-after(., '#'), ', ')"/>
                                <outputRendition>font-style: italic;</outputRendition>
                            </model>
                        </modelSequence>
                    </elementSpec>
                    <elementSpec ident="lem" mode="add">
                        <model behaviour="inline" cssClass="lem">
                            <desc>Ausgabe des Lemmas im Apparat.</desc>
                            <outputRendition scope="after">content: '] ';</outputRendition>
                        </model>
                    </elementSpec>
                    <specGrp>
                        <p xml:lang="de">Der TAC-Apparat muss das processing model für Elemente wie
                                <gi>l</gi> derart erweitern, dass ihre Textknoten im Apparat nicht
                            ausgegeben werden, sondern nur die der eingebetteten <gi>app</gi>,
                                <gi>choice</gi> etc. Elemente.</p>
                        <elementSpec mode="change" ident="l">
                            <model behaviour="block" predicate="not($parameters?tac-mode)"/>
                            <model behaviour="block" predicate="$parameters?tac-mode eq 'text'">
                                <param name="content" value="(count(preceding::l)+1, ' ', ./node())"/>
                            </model>
                            <model behaviour="block" predicate="$parameters?tac-mode eq 'apparatus' and descendant::app">
                                <param name="content" value="(count(preceding::l)+1, ' ', descendant::app)"/>
                            </model>
                            <model behaviour="omit" predicate="$parameters?tac-mode eq 'apparatus'"/>
                        </elementSpec>
                    </specGrp>
                </specGrp>

                <elementSpec mode="add" ident="caesura">
                    <model behaviour="inline">
                        <desc>Entsprechend einem weit verbreiteten editorischen Standard werden zwei
                            senkrechte Striche zur Markierung der Zäsur verwendet.</desc>
                        <param name="content" value="' || '"/>
                    </model>
                </elementSpec>

            </schemaSpec>
        </body>
    </text>
</TEI>